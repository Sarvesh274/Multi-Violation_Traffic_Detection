# -*- coding: utf-8 -*-
"""final_testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KiKmh868roJGa3OL5qh5rgtCEJMrf4dc
"""

!nvidia-smi

!pip3 install cloudinary

!pip install ultralytics

import ultralytics
ultralytics.checks()

from ultralytics import YOLO
from IPython.display import Image

img='/content/shreyash.jpg'

img="/content/H+N.jpg"

img='/content/abhinav bike.jpg'

img='/content/abhinav.jpg'

img='/content/riding-without-helmet-road-safety.jpg'

img='/content/N+WH1.jpg'

!yolo task=detect mode=predict conf=0.25 save=True model=/content/best_11n.pt source=/content/N+WH1.jpg

from ultralytics import YOLO  # Assuming you're using YOLO from Ultralytics

# Load the YOLOv11 model
model = YOLO('/content/best_11n.pt')  # Path to your trained model

# Define class IDs or names for violations
helmet_class_id = 0  # Assuming 0 is the class ID for helmet detection
triple_riding_class_id = 1  # Assuming 1 is the class ID for triple riding detection
number_plate_class_id = 2  # Assuming 2 is the class ID for number plate recognition

# Test image path
image_path = img

# Run prediction on the image
results = model.predict(source=image_path, conf=0.25, save=True)  # Use save=True to store the output image

# Initialize a Boolean to track if a violation was detected
violation_detected = False

# Check if any violation-related classes were detected
for result in results:
    for detection in result.boxes:
        class_id = detection.cls.item()  # Get the class ID
        # Check if the detected class is a violation class
        if class_id in [helmet_class_id, triple_riding_class_id, number_plate_class_id]:
            violation_detected = True
            break  # Exit once a violation is found

# Print or return the result
if violation_detected:
    print("Violation detected!")
else:
    print("No violation detected.")

import cloudinary
import cloudinary.uploader
from cloudinary.utils import cloudinary_url

# Configuration
cloudinary.config(
    cloud_name = "ddn1hxi8k",
    api_key = "989845326942743",
    api_secret = "c1RKKvegSn4xQeE590GsOHkK1mc", # Click 'View API Keys' above to copy your API secret
    secure=True
)

# Upload an image
upload_result = cloudinary.uploader.upload(img,
                                           public_id="plate1")
print(upload_result["secure_url"])

# Optimize delivery by resizing and applying auto-format and auto-quality
optimize_url, _ = cloudinary_url("plate1", fetch_format="auto", quality="auto")
print(optimize_url)

# Transform the image: auto-crop to square aspect_ratio
auto_crop_url, _ = cloudinary_url("plate1", width=500, height=500, crop="auto", gravity="auto")
print(auto_crop_url)

imgUrl=upload_result["secure_url"]

!pip install requests

import matplotlib.pyplot as plt
import cv2

def display_image(image_path):
    # Load the image from the provided file path
    image = cv2.imread(image_path)

    # Convert the image from BGR to RGB
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Display the image using matplotlib
    plt.imshow(image_rgb)
    plt.axis('off')  # Turn off the axis
    plt.show()

# Example usage:

import requests

url = "https://license-plate-from-image.p.rapidapi.com/PlateRecognizerLambda"

# payload = { "url": "https://i.ytimg.com/vi/WPXs6vNiSb4/maxresdefault.jpg" }
# payload = { "url": "https://i.ibb.co/fXYkLGx/numberplate.jpg" }
payload = { "url": imgUrl }

headers = {
	"x-rapidapi-key": "d4070b7abamshfa8e93ff9d201cfp1b14eajsn8278e562f924",
	"x-rapidapi-host": "license-plate-from-image.p.rapidapi.com",
	"Content-Type": "application/json"
}

response = requests.post(url, json=payload, headers=headers)

print(response.json())
data = response.json()

display_image(img)
plate_number = data['results'][0]['plate']
print('Number Plate :',plate_number)

# plate_number="MH-12-XY-1234"

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime

# Setup port number and server name
smtp_port = 587                 # Standard secure SMTP port
smtp_server = "smtp.gmail.com"  # Google SMTP Server

# Set up the email details
email_from = "SamplesTrafficPolice@gmail.com"

# Define the app password (use an app password for better security)
pswd = "zsgm jebk xuyc fpqz"  # Replace with your generated app password

# Store violator details in a dictionary
violator_data = {
    "mh12hg6760": {"email": "abhinavtodmal121@gmail.com", "name": "Abhinav Todmal"},
    "MH-12-XY-1234": {"email": "shimpirohit02@gmail.com", "name": "Rohit Shimpi"},
    # Add more number plates and corresponding violator data here
}

# Function to send email
def send_email(violator_details, number_plate):
    email = violator_details["email"]
    name = violator_details["name"]
    location = "Pune, Maharashtra"  # Example location
    violation_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # Capture current time

    # Email subject and body
    subject = f"Traffic Violation Alert: Action Required - Vehicle No: {number_plate}"

    body = f"""
    Dear {name},

    This is to inform you that your vehicle with the number plate {number_plate} has been detected for a traffic violation.

    Violation Details:
    - Date and Time: {violation_time}
    - Location: {location}

    Kindly note that this is a serious offense. If this activity was unauthorized or you believe it to be an error, please contact us immediately to dispute this notice.

    Next Steps:
    - If you acknowledge the violation, you may proceed to settle the fine via the provided government portal.
    - If you have questions, you may reach out to our traffic department with the details of this notice.

    Please ensure that any further violations are avoided to maintain safety on the road.

    Thank you for your cooperation.

    Sincerely,
    Maharashtra Traffic Control Department
    """

    # Create MIME object to define parts of the email
    msg = MIMEMultipart()
    msg['From'] = email_from
    msg['To'] = email
    msg['Subject'] = subject

    # Attach the body of the message
    msg.attach(MIMEText(body, 'plain'))

    # Convert message to string
    text = msg.as_string()

    # Connect to the server and send email
    print("Connecting to server...")
    try:
        TIE_server = smtplib.SMTP(smtp_server, smtp_port)
        TIE_server.starttls()  # Secure the connection
        TIE_server.login(email_from, pswd)
        print("Successfully connected to server")

        # Send email to violator
        print(f"Sending email to: {name} at {email}...")
        TIE_server.sendmail(email_from, email, text)
        print(f"Email sent to: {name}")
    except smtplib.SMTPAuthenticationError:
        print("SMTP Authentication Error: Please check your email and password.")
    except Exception as e:
        print(f"Failed to send email: {str(e)}")
    finally:
        TIE_server.quit()

# Get the number plate from the user (or provide programmatically)
number_plate_input = plate_number

# Check if the number plate exists in the violator_data dictionary
if number_plate_input in violator_data:
    send_email(violator_data[number_plate_input], number_plate_input)
else:
    print("Number plate not found in the violator database.")